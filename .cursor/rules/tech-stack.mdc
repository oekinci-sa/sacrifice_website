---
description: 
globs: 
---
#TECH STACK

Frontend: React 18, Next JS 14, TypeScript, Shadcn, Shadcn Charts, TailwindCSS

- All TypeScript definitions should be organized under the types folder.
- All forms should include react-hook-form and Zod validations.
- Server state management â†’ React Query
- Client state (UI state) management â†’ Zustand veya useState
- use /hooks folder for custom hooks.
- All pages should be designed for both desktop and mobile. Because it will be accessed 99% of the time from mobile by customers.
- I want to use shadcn as the design system; apart from that, everything should follow a clear standard without unnecessary deviations.
- Use shadcn if possible, otherwise create componenet with tailwindcss
- UI has dark mode feature. So choose the color scheme accordingly.
- At the end of the process of writing or deleting or updating something to the database from the frontend, inform the user whether the process is positive or negative with shadcn toast components.

Backend: Supabase

- Use supabaseClient from /utils/supabaseClient.ts
- Always use realtime database feature for the operations. So, always create subscriptions.
- I Have three tables in the database.
- The sacrifice_animals and sacrifice_no tables in the shareholders tables are connected to each other with a foreign key (sacrifice_id).
- When an operation is performed on the database, show a notification about the result with shadcn toast notifications. For example, your operation could not be performed: (Explanation)

Table 1: sacrifice_animals and its fields are: 
  - sacrifice_id: Primary key (a unique identifier). 
  - sacrifice_no: Sacrifice number (a unique identifier). 
  - sacrifice_time: The time of the sacrifice operation. 
  - share_weight: The weight of a share. 
  - share_price: The price of a share. 
  - empty_share: The number of remaining empty shares. Maximum number is 7 and minimum number is 0.
  - last_edited_time: The date and time when the sacrifice information was last edited. There is a trigger in the database that updates this field when the sacrifice information is edited.
  - last_edited_by: Information about the last person who edited the record (e.g., admin ID or name).
  - notes: Additional information or notes.

Table 2: shareholders and its fields are:
  - shareholder_id: Primary key (a unique identifier field).
  - shareholder_name: The name of the shareholder.
  - phone_number: The phone number of the shareholder. -> varchar(13)
        When we receive an input from users regarding a phone_number, we will definitely check it and send it to db as +905555555555, but when we show it to users in the frontend, we should remove the +9 at the beginning and show it as 05555555555.
  - purchase_time: The time of share purchase. Default value is (now() AT TIME ZONE 'Europe/Istanbul'::text) so don't send backend to this column value.
  - purchased_by: This is the name of the user who purchased the share.
  - sacrifice_id: The associated sacrifice (foreign key). 
  - delivery_fee: Delivery fee. If the delivery type is "Toplu Teslim NoktasÄ±," an additional fee of 500 TL will be charged.
  - share_price: The price of a share associated with the sacrifice. This will comes from the sacrifice_animals table.
  - total_amount: The total amount to be paid. (share_price + delivery_fee)
  - paid_amount: The paid amount. (initial value is 0)
  - remaining_payment: The remaining payment amount. (total_amount - paid_amount)
  - delivery_location: "yenimahalle-pazar-yeri" or "kecioren-otoparki" or "kesimhane".
  - sacrifice_consent: This a boolean value in db. But it is displayed as "vekalet" in UI and in forms, this field is shown in the drop-down menu as "vekalet-alindi" or "vekalet-alinmadi".
  - last_edited_time: The date and time when the shareholder information was last edited. There is a trigger in the database that updates this field when the shareholder information is edited.
  - last_edited_by: Information about the last person who edited the record (e.g., admin ID or name).
  - notes: Additional information or notes.

Table 3: change_logs and its fields are: 
  - event_id: Primary key - serial (a unique identifier field). 
  - table_name: Specifies which table was modified.
  - row_id: The ID of the modified record.
  - column_name: Column name where the change was made.
  - old_value
  - new_value
  - change_type: The type of operation performed (e.g., "Ekleme", "GÃ¼ncelleme", "Silme"). 
  - description: Description of the change. 
  - change_owner: Information about the last person who edited the record (e.g., admin ID or name).
  - changed_at: The date and time when the change was made. 

Table 4: users and its fields are:
  - id (Primary Key ðŸ”‘): A unique identifier for each user. This is google auth id.
  - email: Stores the email address of the user.
  - name: The full name of the user.
  - image: Stores a URL or a file path to the user's profile picture.
  - role: Defines the user's role in the system (e.g., "admin", "user", "moderator"). Can be useful for access control and permissions management.
  - status: Indicates whether the user is active, banned, pending approval, etc.
  Common values: "active", "inactive", "banned", "pending".
  - created_at: Stores the timestamp when the user was created.
  Typically set to CURRENT_TIMESTAMP when the row is inserted.
  - updated_at: Stores the timestamp when the user record was last updated.
  Automatically updated using triggers or ORM-level updates.


Your are not limited to these if you find a more clean solution. But mention about the situation using other frameworks or libraries etc.