#PROJECT
Project Name: Sacrifice Website
Project Description: The project is actually very similar to an e-commerce site. It is a site about the Muslim sacrifice ritual. Muslim users enter the site and choose a sacrificial animal and buy one or more shares. Then, with the code verification sent to their mobile phones, they can make sure that their registration is done and download a PDF printout. In addition, more than one admin can manage and monitor the project via an admin panel.

The features of the pages are as follows
Public Pages:
- /             -> Page where general information about the organization is given.
- /hakkimizda   -> Page where the organizers of the organization are explained
- /hisseal      -> Where the animal is chosen and personal information such as name and surname is entered for the shares received from the animals. Then, they receive the relevant information as an SMS message to their phones. There will be no online payment on the site. Fees will be collected in cash.
- /hissesorgula -> Later, the area where the share information is queried with the code sent to their mobile phones and users can get a PDF printout.
- /yazilar      -> Blog page with articles about sacrifice worship
- /iletisim     -> Page where those who want to contact the institution can get information

Admin Pages:
- /kurban-admin/genel-bakis     -> A page with some general information such as the number of animals, money collected, etc. and graphic table visualizations
- /kurban-admin/kurbanliklar    -> Page with a table of sacrifices and access to special pages for these sacrifices.
- /kurban-admin/kurbanliklar/ayrintilar/[id]    -> Page with a table of shareholders and access to special pages for these shareholders.

#TECH STACK
Backend: Supabase
- I Have three tables in the database.
- The sacrifice_animals and sacrifice_no tables in the shareholders tables are connected to each other with a foreign key.

- sacrifice_animals and its fields are:
    - sacrifice_no: Kurbanlık numarası (eşsiz bir kimlik olabilir).
    - sacrifice_time: Kurbanlık işleminin zamanı.
    - share_price: Bir hissenin fiyatı.
    - empty_share: Kalan boş hisse sayısı.
    - notes: Ek bilgiler veya açıklamalar.
    - sacrifice_id: Primary key (benzersiz bir kimlik alanı).
    - added_at: Kaydın eklenme tarihi ve saati.
    - last_edited_by: Kaydı en son düzenleyen kişinin bilgisi (örneğin, admin ID veya adı).
- shareholders and its fields are:
    - shareholder_id: Primary key (benzersiz bir kimlik alanı).
    - shareholder_name: Hissedarın adı.
    - phone_number: Hissedarın telefon numarası.
    - purchase_time: Hisse satın alım zamanı.
    - sacrifice_no: Hangi kurbanlık ile ilişkili olduğu (foreign key).
    - total_amount_to_pay: Toplam ödenecek tutar.
    - deposit_payment: Ödenen kapora miktarı.
    - remaining_payment: Kalan ödeme miktarı.
    - payment_status: Ödeme durumu (örneğin, "paid", "pending").
    - delivery_fee: Teslimat ücreti.
    - delivery_type: Teslimat türü (örneğin, "self-pickup", "home-delivery").
    - delivery_location: Teslimat adresi veya konumu.
    - vekalet: Vekalet durumu (örneğin, "verildi", "bekleniyor").
    - notes: Ek bilgiler veya açıklamalar.
    - last_edited_by: Kaydı en son düzenleyen kişinin bilgisi (örneğin, admin ID veya adı).
- change_logs and its fields are:
    - id: Primary key (benzersiz bir kimlik alanı).
    - table_name: Hangi tablonun değiştirildiğini belirtir.
    - row_id: Değiştirilen kaydın ID'si.
    - description: Değişikliğin açıklaması.
    - operation: Yapılan işlem türü (ör. "INSERT", "UPDATE", "DELETE").
    - changed_at: Değişikliğin yapıldığı tarih ve saat.
    - change_owner: Kaydı en son düzenleyen kişinin bilgisi (örneğin, admin ID veya adı).

Frontend: React 18, Next JS 14, TypeScript, Shadcn Project, TailwindCSS
- All TypeScript definitions should be organized under the types folder.
- All forms should include react-hook-form and Zod validations.
- All pages should be designed for both desktop and mobile. Because it will be accessed 99% of the time from mobile by customers.
- I want to use shadcn/ui as the design system; apart from that, everything should follow a clear standard without unnecessary deviations.

Your are not limited to these if you find a more clean solution. But mention about the situation using other frameworks or libraries etc.

---------------

#YOUR RULES
- Follow the user’s requirements carefully & to the letter.
- Don't remove comment lines.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at Code Implementation Guidelines .
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.