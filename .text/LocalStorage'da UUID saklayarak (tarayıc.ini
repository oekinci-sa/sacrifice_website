LocalStorage'da UUID saklayarak (tarayıcı bazlı kimlik) oluşturulabilir:


Sorun Tanımı:
Sacrifice_website uygulamamda Next.js ve Supabase kullanıyorum. Kullanıcılar, bir hayvan seçtiklerinde kaç adet hisse almak istediklerini belirtiyor ve bu doğrultuda veritabanındaki empty_share alanı azaltılıyor. Kullanıcı daha sonra bilgilerini dolduruyor. Eğer kullanıcı 3 dakika içinde formu tamamlamazsa, empty_share alanı tekrar artırılarak ilgili hisseler yeniden satışa açılıyor.

Problemin Kaynağı:

Kullanıcı hisseleri seçtikten sonra internet bağlantısını kaybederse ve timeout süresi dolmasına rağmen istemci veritabanına geri yazamazsa, empty_share alanı eski haline getirilemez.
Bu durumda, aslında boş olan hisseler sistemde dolu gibi gözükebilir ve başkaları için erişilemez hale gelir.

Potansiyel Çözüm Yöntemleri ve Zorlukları:

Timeout işlemini yalnızca backend'de tutmak: Kullanıcı bağlantıyı kaybettiğinde bile sunucu tarafında işlemi gerçekleştirmek mümkün olur. Ancak, bir kullanıcı hisseyi aldıktan sadece 10 saniye sonra vazgeçerse, backend’deki 1 dakikalık heartbeat kontrolü nedeniyle hisse 50 saniye boyunca rezerve olarak kalır. Bu, Supabase Realtime ile senkron çalışmayı olumsuz etkiler.

İdeal Çözüm Arayışı:

Kullanıcının bağlantısını takip eden, kesinti durumunda sistemin hisseleri otomatik olarak geri kazanmasını sağlayan bir mekanizma nasıl oluşturulabilir?
Hem anlık güncellemeler (Realtime) hem de bağlantı kopmalarına karşı dayanıklı bir yapı nasıl sağlanabilir?

Var olan tablolarım şu anda aşağıdaki şekildeler:
Table 1: sacrifice_animals and its fields are: 
  - sacrifice_id: Primary key (a unique identifier). 
  - sacrifice_no: Sacrifice number (a unique identifier). 
  - sacrifice_time: The time of the sacrifice operation. 
  - share_weight: The weight of a share. 
  - share_price: The price of a share. 
  - empty_share: The number of remaining empty shares. Maximum number is 7 and minimum number is 0.
  - last_edited_time: The date and time when the sacrifice information was last edited. There is a trigger in the database that updates this field when the sacrifice information is edited.
  - last_edited_by: Information about the last person who edited the record (e.g., admin ID or name).
  - notes: Additional information or notes.

Table 2: shareholders and its fields are:
  - shareholder_id: Primary key (a unique identifier field).
  - shareholder_name: The name of the shareholder.
  - phone_number: The phone number of the shareholder. -> varchar(13)
        When we receive an input from users regarding a phone_number, we will definitely check it and send it to db as +905555555555, but when we show it to users in the frontend, we should remove the +9 at the beginning and show it as 05555555555.
  - purchase_time: The time of share purchase. Default value is (now() AT TIME ZONE 'Europe/Istanbul'::text) so don't send backend to this column value.
  - purchased_by: This is the name of the user who purchased the share.
  - sacrifice_id: The associated sacrifice (foreign key). 
  - delivery_fee: Delivery fee. If the delivery type is "Toplu Teslim Noktası," an additional fee of 500 TL will be charged.
  - share_price: The price of a share associated with the sacrifice. This will comes from the sacrifice_animals table.
  - total_amount: The total amount to be paid. (share_price + delivery_fee)
  - paid_amount: The paid amount. (initial value is 0)
  - remaining_payment: The remaining payment amount. (total_amount - paid_amount)
  - delivery_location: "yenimahalle-pazar-yeri" or "kecioren-otoparki" or "kesimhane".
  - sacrifice_consent: This a boolean value in db. But it is displayed as "vekalet" in UI and in forms, this field is shown in the drop-down menu as "vekalet-alindi" or "vekalet-alinmadi".
  - last_edited_time: The date and time when the shareholder information was last edited. There is a trigger in the database that updates this field when the shareholder information is edited.
  - last_edited_by: Information about the last person who edited the record (e.g., admin ID or name).
  - notes: Additional information or notes.